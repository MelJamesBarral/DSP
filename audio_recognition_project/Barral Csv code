import librosa
import numpy as np

def extract_mfcc_coefficients(audio_path, total_coeffs=1300, n_mfcc=13):
    """
    Extracts the first 'total_coeffs' MFCC coefficients from an audio file.
    """
    try:
        # Load audio file (librosa will automatically select the best backend)
        y, sr = librosa.load(audio_path, sr=None)

        # Compute MFCCs with 13 coefficients per frame
        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=n_mfcc)

        # Flatten to get a single-dimensional array and take the first 1300 coefficients
        mfcc_flat = mfcc.T.flatten()[:total_coeffs]

        # If the flattened array has less than 1300 coefficients, pad with zeros
        if len(mfcc_flat) < total_coeffs:
            mfcc_flat = np.pad(mfcc_flat, (0, total_coeffs - len(mfcc_flat)), mode='constant')

        return mfcc_flat

    except Exception as e:
        print(f"Error processing {audio_path}: {e}")
        return np.zeros(total_coeffs)  # Return a zero array if there's an error

def generate_mfcc_matrix(num_files=50, total_coeffs=1300, file_prefix="hen_audio_", file_suffix=".wav"):
    """
    Loops through audio files, extracts MFCCs, and generates a matrix with shape (100, 1300).
    """
    mfcc_matrix = np.zeros((num_files, total_coeffs))

    for i in range(1, num_files + 1):
        # Format file name as thevoiceECE_01.wav, thevoiceECE_02.wav, ..., thevoiceECE_100.wav
        audio_path = f"{file_prefix}{i:02}{file_suffix}"
        mfcc_coeffs = extract_mfcc_coefficients(audio_path, total_coeffs=total_coeffs)
        mfcc_matrix[i - 1, :] = mfcc_coeffs

    return mfcc_matrix

def save_matrix_to_csv(matrix, output_path="final_mfcc_matrix.csv"):
    """
    Saves the MFCC matrix to a CSV file.
    """
    np.savetxt(output_path, matrix, delimiter=',')
    print(f"Final MFCC matrix saved to {output_path}")

def main():
    # Generate the MFCC matrix from 100 audio files
    mfcc_matrix = generate_mfcc_matrix()

    # Check matrix shape for confirmation
    print("Final MFCC Matrix Shape: ", mfcc_matrix.shape)  # Should be (50, 1300)

    # Save the matrix to a CSV file
    save_matrix_to_csv(mfcc_matrix)

if __name__ == "__main__":
    main()
